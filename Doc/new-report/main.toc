\contentsline {section}{\numberline {1}Language choice}{3}{section.1}
\contentsline {section}{\numberline {2}Global design}{3}{section.2}
\contentsline {section}{\numberline {3}Lexer}{3}{section.3}
\contentsline {subsection}{\numberline {3.1}How it works}{3}{subsection.3.1}
\contentsline {subsection}{\numberline {3.2}Error management}{4}{subsection.3.2}
\contentsline {subsection}{\numberline {3.3}Token and deterministic token}{4}{subsection.3.3}
\contentsline {subsection}{\numberline {3.4}Paired token}{4}{subsection.3.4}
\contentsline {section}{\numberline {4}Parser}{4}{section.4}
\contentsline {subsection}{\numberline {4.1}Architecture}{5}{subsection.4.1}
\contentsline {subsection}{\numberline {4.2}Declaring a rule}{5}{subsection.4.2}
\contentsline {subsection}{\numberline {4.3}Pretty printer}{6}{subsection.4.3}
\contentsline {subsection}{\numberline {4.4}Random program generator}{6}{subsection.4.4}
\contentsline {subsection}{\numberline {4.5}Parsing}{6}{subsection.4.5}
\contentsline {subsubsection}{\numberline {4.5.1}TokenDeck}{7}{subsubsection.4.5.1}
\contentsline {subsubsection}{\numberline {4.5.2}\lstinline {Parser} internal parsing}{7}{subsubsection.4.5.2}
\contentsline {subsection}{\numberline {4.6}Grammar analysis \& optimization}{7}{subsection.4.6}
\contentsline {subsubsection}{\numberline {4.6.1}Left recursion}{7}{subsubsection.4.6.1}
\contentsline {subsubsection}{\numberline {4.6.2}Determine the n-th token to be accepted by a rule}{7}{subsubsection.4.6.2}
\contentsline {subsubsection}{\numberline {4.6.3}First token}{8}{subsubsection.4.6.3}
\contentsline {subsubsection}{\numberline {4.6.4}Paired tokens or how to have easy multiple errors handling}{8}{subsubsection.4.6.4}
\contentsline {subsubsection}{\numberline {4.6.5}Paired token optimization}{8}{subsubsection.4.6.5}
\contentsline {subsubsection}{\numberline {4.6.6}Same thing without pairing: \lstinline {getInsideTokens}}{8}{subsubsection.4.6.6}
\contentsline {subsection}{\numberline {4.7}Grammar pretty-print: SPL example}{9}{subsection.4.7}
\contentsline {section}{\numberline {5}Type inference}{10}{section.5}
\contentsline {subsection}{\numberline {5.1}Architecture}{10}{subsection.5.1}
\contentsline {subsection}{\numberline {5.2}Dealing with \lstinline {ParserRule}}{10}{subsection.5.2}
\contentsline {subsection}{\numberline {5.3}Context}{10}{subsection.5.3}
\contentsline {subsubsection}{\numberline {5.3.1}Variable declaration}{10}{subsubsection.5.3.1}
\contentsline {subsubsection}{\numberline {5.3.2}Get a variable by name}{10}{subsubsection.5.3.2}
\contentsline {subsection}{\numberline {5.4}Types}{11}{subsection.5.4}
\contentsline {subsubsection}{\numberline {5.4.1}\texttt {Type} class}{11}{subsubsection.5.4.1}
\contentsline {subsubsection}{\numberline {5.4.2}Unknown type}{11}{subsubsection.5.4.2}
\contentsline {subsubsection}{\numberline {5.4.3}CombinedType}{11}{subsubsection.5.4.3}
\contentsline {subsubsection}{\numberline {5.4.4}TupleType}{11}{subsubsection.5.4.4}
\contentsline {subsubsection}{\numberline {5.4.5}ListType}{12}{subsubsection.5.4.5}
\contentsline {subsubsection}{\numberline {5.4.6}FunctionType}{12}{subsubsection.5.4.6}
\contentsline {subsubsection}{\numberline {5.4.7}Integer/Boolean type}{12}{subsubsection.5.4.7}
\contentsline {subsubsection}{\numberline {5.4.8}Type order}{12}{subsubsection.5.4.8}
\contentsline {subsubsection}{\numberline {5.4.9}Type unification}{12}{subsubsection.5.4.9}
\contentsline {subsubsection}{\numberline {5.4.10}Combined type unification}{12}{subsubsection.5.4.10}
\contentsline {subsection}{\numberline {5.5}Add typing logic to the different \lstinline {ParserRule}s}{13}{subsection.5.5}
\contentsline {subsubsection}{\numberline {5.5.1}Function declaration}{13}{subsubsection.5.5.1}
\contentsline {paragraph}{Pre treatment}{13}{paragraph*.1}
\contentsline {paragraph}{Verifying returns paths}{13}{paragraph*.2}
\contentsline {paragraph}{Looking for type cycle dependencies}{13}{paragraph*.3}
\contentsline {paragraph}{Arranging the order of type check}{14}{paragraph*.4}
\contentsline {paragraph}{Check if the output is making sense}{14}{paragraph*.5}
\contentsline {subsection}{\numberline {5.6}Note}{14}{subsection.5.6}
\contentsline {section}{\numberline {6}SSM Code generation}{14}{section.6}
\contentsline {subsection}{\numberline {6.1}Scopes}{14}{subsection.6.1}
\contentsline {subsection}{\numberline {6.2}Closure support}{15}{subsection.6.2}
\contentsline {subsection}{\numberline {6.3}Function pointer structure}{15}{subsection.6.3}
\contentsline {subsection}{\numberline {6.4}Declaring a variable}{15}{subsection.6.4}
\contentsline {paragraph}{The variable is lifted to the heap}{16}{paragraph*.6}
\contentsline {paragraph}{The variable is not lifted}{16}{paragraph*.7}
\contentsline {subsection}{\numberline {6.5}Setting a variable}{16}{subsection.6.5}
\contentsline {subsubsection}{\numberline {6.5.1}Lifted variable}{16}{subsubsection.6.5.1}
\contentsline {subsubsection}{\numberline {6.5.2}Not lifted variable}{16}{subsubsection.6.5.2}
\contentsline {subsection}{\numberline {6.6}Consulting a variable}{16}{subsection.6.6}
\contentsline {paragraph}{If it's a lifted variable}{16}{paragraph*.8}
\contentsline {paragraph}{Otherwise}{16}{paragraph*.9}
\contentsline {subsection}{\numberline {6.7}Declaring a function}{17}{subsection.6.7}
\contentsline {subsection}{\numberline {6.8}Calling a function}{17}{subsection.6.8}
\contentsline {subsection}{\numberline {6.9}Global scope}{17}{subsection.6.9}
\contentsline {section}{\numberline {7}Conclusion}{17}{section.7}
